@import url("https://fonts.googleapis.com/css2?family=Roboto&display=swap");

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: "Roboto", sans-serif;
  min-height: 100vh;

  /* first refer container class */
  display: grid;
  grid-template-columns: repeat(9, 1fr);
  grid-auto-rows: 50px auto 50px;

  /* can define names of items on page but it also needs to be applied to each items on page, hd - header, mn - main, sb - sidebar, ft - footer */
  grid-template-areas:
  "hd hd hd hd hd hd hd hd hd"
  "mn mn mn mn mn mn mn sb sb"
  "ft ft ft ft ft ft ft ft ft";

  column-gap: 0.5rem;

  /* these are just named and not defined */
}

.el {
  background-color: rebeccapurple;
  color: #fff;
  display: grid;
  place-content: center;
}

.header {
  grid-area: hd;
}

.sidebar {
  grid-area: sb;
  background-color: blue;
}

.footer {
  grid-area: ft;
}

.box {
  background-color: #000;
  color: #fff;
  font-size: 2rem;
  padding: 0.5rem;
}

.container {
  grid-area: mn; 
  /* refer from below and then refer body */

  min-height: 400px;

  display: grid;
  /* all elements get converted to grid */

  /* grid-auto-flow: column; */
  /* all elements are arranged in equal sized no of columns same as elements  */

  /* grid-template-columns: 200px 100px 200px; */
  /* will now have three columns and all elements will have column no based on the order of elements, if there are six elements then first three will get three columns in order and other three will get three columns in order and will be arranged as a row below the first */

  /* grid-template-columns: 2fr 1fr 1fr; */
  /* can use fractions (2:1:1) instead of absolute value will use whole page width, can also mix absolute value and fraction value as input 200px 1fr 1fr */

  /* grid-template-columns: repeat(4, 1fr); */
  /* there would be 4 columns with 1fr length each, other two will be below first two columns in next row */

  grid-template-columns: repeat(2, 1fr 2fr);
  /* can also have patterns where there would be patterns of two columns each hence one row will contain 4 columns in ratio 1:2, remaining two columns will have same pattern in next row */

  /* grid-auto-rows: 200px; */
  /* each row becomes this tall */

  grid-auto-rows: minmax(150px, auto);
  /* minimum 150px tall, but if container longer than that, than will be longer, if height of container lower than that, then also will be of min size */

  /* can also have grid-template-rows and grid-auto-columns */

  /* row-gap: 1rem;
  column-gap: 1rem; */
  /* gap: 1rem; */
  gap: 1rem 0.5rem;
  /* will have both row and col gap */
}

.box:first-child {
  background-color: #00f;

  /* define how many column this box takes. (change dimensions of box by defining in terms of lines). our boxes are in patterns of 2. hence each pattern contains 3 lines left middle and right and here first's right and second's left overlaps hence total lines 5 starting from 1 */
  /* grid-column-start: 1;
  grid-column-end: 4; */

  /* can do same for row */
  /* grid-row-start: 1;
  grid-row-end: 3; */

  /* can see column lines in inspect elements -> layout -> tick grid overlays - container name */

  /* same as above - shorthands */
  grid-column: 1 / 4;
  grid-row: 1 / 3;

  /* like flex items here also we have grid items and can nest a grid inside a grid */
  display: grid;
  /* align-content: end;  */
  /* will move to bottom, start to top and center to center */
  /* align-content: center;
  justify-content: center; */
  /* align in left and right direction */

  /* shorthand */
  /* place-content: end center; */
  /* align - justify */
  place-content: center;
  /* will take this value for both */
}

.box:nth-child(2) {
  background-color: purple;

  grid-column: 1 / 5;
  grid-row: 3 / 4;
}